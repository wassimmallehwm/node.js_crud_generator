{"version":3,"sources":["Components/app-generator/entities-generator/mongoDB/mongoose/controllers-generator/template.js","Components/app-generator/entities-generator/mongoDB/mongoose/controllers-generator/ControllersGenerator.ts"],"names":["controllerTemplate","entity","create","entity_name","read","update","remove","paginate","entity_paginated","toLocaleLowerCase","ControllersGenerator","entities","directory","controllers","folder","forEach","file"],"mappings":"wMA0HeA,EAzHY,SAACC,GACxB,IAAMC,EAAM,wFAGOD,EAAOE,YAHd,+IAQGF,EAAOE,YARV,wHAU+BF,EAAOE,YAVtC,8BAeNC,EAAI,8HAIaH,EAAOE,YAJpB,0GAQKF,EAAOE,YARZ,mHAU8BF,EAAOE,YAVrC,oJAkBaF,EAAOE,YAlBpB,2GAsBKF,EAAOE,YAtBZ,oHAwB8BF,EAAOE,YAxBrC,8BA8BJE,EAAM,4HAIWJ,EAAOE,YAJlB,oJAQGF,EAAOE,YARV,sHAU+BF,EAAOE,YAVtC,8BAgBNG,EAAM,8HAKWL,EAAOE,YALlB,kHAQGF,EAAOE,YARV,sHAU+BF,EAAOE,YAVtC,8BAgBNI,EAAWN,EAAOO,iBAAP,4ZAiBfP,EAAOE,YAjBQ,iQA0BiCF,EAAOE,YA1BxC,oDA+Bb,GAEJ,MAAM,SAAN,OAAgBF,EAAOE,YAAvB,iCAA2DF,EAAOE,YAAYM,oBAA9E,sBACIP,EADJ,mBAEIE,EAFJ,mBAGIG,EAHJ,mBAIIF,EAJJ,mBAKIC,EALJ,aClGWI,E,wGARX,SAA2BC,EAAoBC,GAC3C,IAAIC,EAAW,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAWE,OAAO,eACpCH,EAASI,SAAQ,SAAAd,GACF,OAAXY,QAAW,IAAXA,KAAaG,KAAb,UAAqBf,EAAOE,YAAYM,oBAAxC,kBAA6ET,EAAmBC,W","file":"static/js/3.c2087d9c.chunk.js","sourcesContent":["\r\nconst controllerTemplate = (entity) => {\r\n    const create = `\r\nmodule.exports.create = async(req, res) => {\r\n  try {\r\n    const item = new ${entity.entity_name}(req.body);\r\n\r\n    const result = await item.save();\r\n    return res.status(200).json(result);\r\n  } catch (err) {\r\n    console.log(\"${entity.entity_name} creation failed: \" + err);\r\n    return res.status(500).json({\r\n      message: \"Error while trying to create ${entity.entity_name}\",\r\n    });\r\n  }\r\n};\r\n    `;\r\n    const read = `\r\nmodule.exports.getAll = async(req, res) => {\r\n  try {\r\n    let query = req.query || {};\r\n    const result = await ${entity.entity_name}.find(query);\r\n\r\n    return res.status(200).json(result);\r\n  } catch (err) {\r\n    console.log(\"${entity.entity_name} getAll failed: \" + err);\r\n    return res.status(500).json({\r\n      message: \"Error while trying to get ${entity.entity_name}\",\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports.getById = async(req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const result = await ${entity.entity_name}.findById(id);\r\n\r\n    return res.status(200).json(result);\r\n  } catch (err) {\r\n    console.log(\"${entity.entity_name} getById failed: \" + err);\r\n    return res.status(500).json({\r\n      message: \"Error while trying to get ${entity.entity_name}\",\r\n    });\r\n  }\r\n};\r\n    `;\r\n\r\n    const update = `\r\nmodule.exports.update = async(req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const result = await ${entity.entity_name}.findOneAndUpdate({ _id: id}, req.body, { new: true });\r\n\r\n    return res.status(200).json(result);\r\n  } catch (err) {\r\n    console.log(\"${entity.entity_name} update failed: \" + err);\r\n    return res.status(500).json({\r\n      message: \"Error while trying to update ${entity.entity_name}\",\r\n    });\r\n  }\r\n};\r\n    `;\r\n\r\n    const remove = `\r\nmodule.exports.remove = async(req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const result = await ${entity.entity_name}.deleteOne({ _id: id});\r\n    return res.status(200).json(result);\r\n  } catch (err) {\r\n    console.log(\"${entity.entity_name} delete failed: \" + err);\r\n    return res.status(500).json({\r\n      message: \"Error while trying to delete ${entity.entity_name}\",\r\n    });\r\n  }\r\n};\r\n    `;\r\n\r\n    const paginate = entity.entity_paginated ? `\r\nmodule.exports.getList = async(req, res) => {\r\n    const { page = 1, limit = 20, sortField, sortDir } = req.query;\r\n    const options = {\r\n        page: parseInt(page, 10),\r\n        limit: parseInt(limit, 10),\r\n        sort: {}\r\n\r\n    };\r\n\r\n    if (sortField && sortDir) {\r\n        options.sort = {\r\n            [sortField]: sortDir\r\n        }\r\n    }\r\n\r\n    return res.status(200).json(result);\r\n    ${entity.entity_name}.paginate({}, options)\r\n    .then(\r\n        result => {\r\n            res.status(200).json(result);\r\n        }\r\n    )\r\n    .catch(\r\n        error => {\r\n            return res.status(500).json({\r\n                message: \"Error while trying to get ${entity.entity_name}\",\r\n            });\r\n        }\r\n    );\r\n};\r\n    ` : '';\r\n\r\n    return `const ${entity.entity_name} = require(\"../models/${entity.entity_name.toLocaleLowerCase()}\");\r\n      ${create}\r\n      ${read}\r\n      ${paginate}\r\n      ${update}\r\n      ${remove}\r\n      `;\r\n    \r\n}\r\n\r\nexport default controllerTemplate;","import JSZip from \"jszip\";\r\nimport { Entity } from \"../../../../../../types/Entity\";\r\nimport controllerTemplate from \"./template\";\r\n\r\nclass ControllersGenerator {\r\n\r\n    static generateControllers(entities: Entity[], directory: JSZip){\r\n        var controllers = directory?.folder(\"controllers\");\r\n        entities.forEach(entity => {\r\n            controllers?.file(`${entity.entity_name.toLocaleLowerCase()}.controller.js`, controllerTemplate(entity));\r\n        })\r\n    }\r\n}\r\n\r\nexport default ControllersGenerator;"],"sourceRoot":""}